
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the UFT Developer Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package com;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.web.*;

// This class is automatically generated by the UFT Developer Application Model code generator
public class AOS_AppModel extends AppModelBase {	private AdvantageShoppingPage AdvantageShoppingPage;
	
	public AOS_AppModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("AOS_AppModel");
		AdvantageShoppingPage = new AdvantageShoppingPage(contextTestObject, this);
		rebuildDescriptions();
	}	

		public AdvantageShoppingPage AdvantageShoppingPage() { return AdvantageShoppingPage; }

	public class AdvantageShoppingPage extends PageNodeBase
	{


	private SpeakersCategoryTxtLink SpeakersCategoryTxtLink;
	private BoseSoundlinkBluetoothSpeakerIIIWebElement BoseSoundlinkBluetoothSpeakerIIIWebElement;
	private SaveToCartButton SaveToCartButton;
	private MenuCartWebElement MenuCartWebElement;
	private REMOVEWebElement REMOVEWebElement;
	private HOMELink HOMELink;
		public AdvantageShoppingPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

		SpeakersCategoryTxtLink = new SpeakersCategoryTxtLink(this, applicationModel);
		BoseSoundlinkBluetoothSpeakerIIIWebElement = new BoseSoundlinkBluetoothSpeakerIIIWebElement(this, applicationModel);
		SaveToCartButton = new SaveToCartButton(this, applicationModel);
		MenuCartWebElement = new MenuCartWebElement(this, applicationModel);
		REMOVEWebElement = new REMOVEWebElement(this, applicationModel);
		HOMELink = new HOMELink(this, applicationModel);

			setDisplayName("Advantage Shopping");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		public SpeakersCategoryTxtLink SpeakersCategoryTxtLink() { return SpeakersCategoryTxtLink; }
		public BoseSoundlinkBluetoothSpeakerIIIWebElement BoseSoundlinkBluetoothSpeakerIIIWebElement() { return BoseSoundlinkBluetoothSpeakerIIIWebElement; }
		public SaveToCartButton SaveToCartButton() { return SaveToCartButton; }
		public MenuCartWebElement MenuCartWebElement() { return MenuCartWebElement; }
		public REMOVEWebElement REMOVEWebElement() { return REMOVEWebElement; }
		public HOMELink HOMELink() { return HOMELink; }
		
	public class SpeakersCategoryTxtLink extends LinkNodeBase
	{


		public SpeakersCategoryTxtLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);


			setDisplayName("SpeakersCategoryTxt");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("SPAN").innerText("SPEAKERS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		
	}

	public class BoseSoundlinkBluetoothSpeakerIIIWebElement extends WebElementNodeBase
	{


		public BoseSoundlinkBluetoothSpeakerIIIWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);


			setDisplayName("Bose Soundlink Bluetooth Speaker III");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("Bose Soundlink Bluetooth Speaker III").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		
	}

	public class SaveToCartButton extends ButtonNodeBase
	{


		public SaveToCartButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);


			setDisplayName("save_to_cart");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").name("ADD TO CART").buttonType("submit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		
	}

	public class MenuCartWebElement extends WebElementNodeBase
	{


		public MenuCartWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);


			setDisplayName("menuCart");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("svg").innerText("").accessibilityName("").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		
	}

	public class REMOVEWebElement extends WebElementNodeBase
	{


		public REMOVEWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);


			setDisplayName("REMOVE");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("REMOVE").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		
	}

	public class HOMELink extends LinkNodeBase
	{


		public HOMELink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);


			setDisplayName("HOME");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().tagName("A").innerText("HOME").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

		
	}

	}



	public abstract class PageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Page, com.hp.lft.sdk.web.PageDescription> implements com.hp.lft.sdk.web.Page
	{		
		public PageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}

	public abstract class LinkNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Link, com.hp.lft.sdk.web.LinkDescription> implements com.hp.lft.sdk.web.Link
	{		
		public LinkNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColor();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFontName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFontName();
		}

		@Override 
		public java.lang.String getHref() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHref();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getTarget() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTarget();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}

	public abstract class WebElementNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.WebElement, com.hp.lft.sdk.web.WebElementDescription> implements com.hp.lft.sdk.web.WebElement
	{		
		public WebElementNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}

	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Button, com.hp.lft.sdk.web.ButtonDescription> implements com.hp.lft.sdk.web.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}




		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getButtonType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtonType();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
